---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:

    - name: "Create an Address Block with tags"
      infoblox.universal_ddi.ipam_address_block:
        address: "192.168.0.0/27"
        space: "{{ _ip_space.id }}"
        tags:
          environment: "test"
          location: "site-1"
        state: "present"
      register: tagged_address_block

    - name: "Create a second Address Block with the same tags but smaller capacity"
      infoblox.universal_ddi.ipam_address_block:
        address: "172.16.0.0/27"
        space: "{{ _ip_space.id }}"
        tags:
          environment: "test"
          location: "site-1"
        state: "present"
      register: small_tagged_address_block

    - name: "Get information about the next available Subnet"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        id: "{{ _address_block.id }}"
        cidr: 24
      register: subnet_info
    - assert:
        that:
          - subnet_info is not failed
          - subnet_info.objects | length == 1

    - name: "Get information about the next available Subnet with count"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        id: "{{ _address_block.id }}"
        cidr: 24
        count: 5
      register: subnet_info
    - assert:
        that:
          - subnet_info is not failed
          - subnet_info.objects | length == 5

    - name: "Get next available subnet by a single tag filter"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        tag_filters:
          environment: "test"
        cidr: 30
        count: 1
      register: subnet_info
    - assert:
        that:
          - subnet_info is not failed
          - subnet_info.objects | length == 1

    - name: "Get next available subnet by multiple tag filters"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        tag_filters:
          environment: "test"
          location: "site-1"
        cidr: 30
        count: 2
      register: subnet_info
    - assert:
        that:
          - subnet_info is not failed
          - subnet_info.objects | length == 2

    - name: "Get multiple next available subnets requiring more than one address block"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        tag_filters:
          environment: "test"
          location: "site-1"
        cidr: 30
        count: 15
      register: subnet_info
    - assert:
        that:
          - subnet_info is not failed
          - subnet_info.objects | length == 15

    - name: "Get next available subnet with non-existent tags"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        tag_filters:
          environment: "production"
        cidr: 24
        count: 1
      register: subnet_info
      ignore_errors: true
    - assert:
        that:
          - subnet_info is failed
          - "'No address block found with the given tags' in subnet_info.msg"

    - name: "Get next available subnet with tag filter requesting too many subnets"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        tag_filters:
          environment: "test"
        cidr: 24
        count: 25  # Greater than maximum allowed count of 20
      register: subnet_info
      ignore_errors: true
    - assert:
        that:
          - subnet_info is failed
          - "'Parameter \\'count\\' cannot exceed 20' in subnet_info.msg"

    - name: "Get next available subnet with valid tags but insufficient available subnets"
      infoblox.universal_ddi.ipam_next_available_subnet_info:
        tag_filters:
          environment: "test"
        cidr: 16  # This high CIDR value will cause insufficient available subnets
        count: 5
      register: subnet_info
      ignore_errors: true
    - assert:
        that:
          - subnet_info is failed
          - "'Not enough subnets found with the given tags' in subnet_info.msg"

  always:
    # Cleanup if the test fails
    - name: "Delete IP Space"
      ansible.builtin.include_role:
        name: setup_ip_space
        tasks_from: cleanup.yml
